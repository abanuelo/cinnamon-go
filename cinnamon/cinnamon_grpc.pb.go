// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: cinnamon.proto

package cinnamon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cinnamon_Intercept_FullMethodName = "/Cinnamon/Intercept"
)

// CinnamonClient is the client API for Cinnamon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CinnamonClient interface {
	// rpc Create(CreateRequest) returns (CreateResponse);
	Intercept(ctx context.Context, in *InterceptRequest, opts ...grpc.CallOption) (*InterceptResponse, error)
}

type cinnamonClient struct {
	cc grpc.ClientConnInterface
}

func NewCinnamonClient(cc grpc.ClientConnInterface) CinnamonClient {
	return &cinnamonClient{cc}
}

func (c *cinnamonClient) Intercept(ctx context.Context, in *InterceptRequest, opts ...grpc.CallOption) (*InterceptResponse, error) {
	out := new(InterceptResponse)
	err := c.cc.Invoke(ctx, Cinnamon_Intercept_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinnamonServer is the server API for Cinnamon service.
// All implementations must embed UnimplementedCinnamonServer
// for forward compatibility
type CinnamonServer interface {
	// rpc Create(CreateRequest) returns (CreateResponse);
	Intercept(context.Context, *InterceptRequest) (*InterceptResponse, error)
	mustEmbedUnimplementedCinnamonServer()
}

// UnimplementedCinnamonServer must be embedded to have forward compatible implementations.
type UnimplementedCinnamonServer struct {
}

func (UnimplementedCinnamonServer) Intercept(context.Context, *InterceptRequest) (*InterceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Intercept not implemented")
}
func (UnimplementedCinnamonServer) mustEmbedUnimplementedCinnamonServer() {}

// UnsafeCinnamonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinnamonServer will
// result in compilation errors.
type UnsafeCinnamonServer interface {
	mustEmbedUnimplementedCinnamonServer()
}

func RegisterCinnamonServer(s grpc.ServiceRegistrar, srv CinnamonServer) {
	s.RegisterService(&Cinnamon_ServiceDesc, srv)
}

func _Cinnamon_Intercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinnamonServer).Intercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cinnamon_Intercept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinnamonServer).Intercept(ctx, req.(*InterceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cinnamon_ServiceDesc is the grpc.ServiceDesc for Cinnamon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cinnamon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cinnamon",
	HandlerType: (*CinnamonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Intercept",
			Handler:    _Cinnamon_Intercept_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cinnamon.proto",
}
